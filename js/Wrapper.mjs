// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const Wrapper_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.Wrapper_destroy(ptr);
});

export class Wrapper {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];

    #internalConstructor(symbol, ptr, selfEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("Wrapper is an Opaque type. You cannot call its constructor.");
            return;
        }
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;

        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            Wrapper_box_destroy_registry.register(this, this.#ptr);
        }

        return this;
    }
    get ffiValue() {
        return this.#ptr;
    }


    static new_() {

        const result = wasm.Wrapper_new();

        try {
            return new Wrapper(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
        }
    }

    returnInner() {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 8, 4, false);

        // This lifetime edge depends on lifetimes 'a
        let aEdges = [this];


        const result = wasm.Wrapper_return_inner(diplomatReceive.buffer, this.ffiValue);

        try {
            return new diplomatRuntime.DiplomatSliceStr(wasm, diplomatReceive.buffer,  "string8", aEdges).getValue();
        }

        finally {
            diplomatReceive.free();
        }
    }

    ownedBytes() {
        const write = new diplomatRuntime.DiplomatWriteBuf(wasm);


        const result = wasm.Wrapper_owned_bytes(this.ffiValue, write.buffer);

        try {
            return result === 0 ? null : write.readString8();
        }

        finally {
            write.free();
        }
    }

    constructor(symbol, ptr, selfEdge) {
        return this.#internalConstructor(...arguments)
    }
}