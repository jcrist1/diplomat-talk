#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2024::*;
#[macro_use]
extern crate std;
pub mod ffi {
    use diplomat_runtime::DiplomatStr;
    pub struct Wrapper(String);
    impl Wrapper {
        pub fn new() -> Box<Wrapper> {
            Box::new(Wrapper(String::new()))
        }
        #[allow(clippy::needless_lifetimes)]
        pub fn return_inner<'a>(&'a self) -> &'a DiplomatStr {
            self.0.as_bytes()
        }
    }
    use diplomat_runtime::*;
    use core::ffi::c_void;
    #[no_mangle]
    extern "C" fn Wrapper_new() -> Box<Wrapper> {
        Wrapper::new()
    }
    #[no_mangle]
    extern "C" fn Wrapper_return_inner<'a>(
        this: &'a Wrapper,
    ) -> diplomat_runtime::DiplomatStrSlice<'a> {
        this.return_inner().into()
    }
    #[no_mangle]
    extern "C" fn Wrapper_destroy(this: Box<Wrapper>) {}
}
